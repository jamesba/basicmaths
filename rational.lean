import .natural
import .integer

--
-- So here we make use of two new features, quotients and subtypes
--
--  Given a type Œ± an a property p: Œ± ‚Üí Prop we can define a new type
--  { a: Œ± // p a }, which is a type where each element is of the form
--  ‚ü®a, h‚ü©, where a : Œ± and h : p a.
--
--  Given a type Œ± and a relation r: Œ± ‚Üí Œ± ‚Üí Prop we have new properties
--    * reflexive r := (‚àÄ a : Œ±, r a a)
--    * symmetric r := (‚àÄ a b : Œ±, r a b ‚Üî r b a)
--    * transitive r := (‚àÄ a b c : Œ±, r a b ‚àß r b c ‚Üí r a c)
--    * equivalence r := reflexive r ‚àß symmetric r ‚àß transitive r
--
--  Given a type Œ±, a relation r: Œ± ‚Üí Œ± ‚Üí Prop and a proof h: equivalence r
--    * s: setoid Œ± is an instance which can be defined as ‚ü®r, h‚ü©
--    * and this defines a new type quotient s
--    * given any a : Œ± we have ‚ü¶a‚üß : quotient s
--    * given any a b : Œ± we have the notation a ‚âà b := r a b
--    * given any a b : Œ± quotient.sound is a proof a ‚âà b ‚Üí ‚ü¶a‚üß = ‚ü¶b‚üß
--    * given any a b : Œ± quotient.exact is a proof ‚ü¶a‚üß = ‚ü¶b‚üß ‚Üí a ‚âà b
--    * given any f: Œ± ‚Üí Œ± and a proof h: ‚àÄ a b : Œ±, a ‚âà b ‚Üí f a ‚âà f b then
--      given x : quotient s, then quotient.lift_on x f h : quotient s, defined
--      such that quotient.lift_on ‚ü¶a‚üß f h = ‚ü¶f a‚üß
--    * given any p: (quotient s) ‚Üí Prop and a proof h: ‚àÄ a : Œ±, p ‚ü¶a‚üß then
--      for any x : (quotient s), quotient.induction_on x h is a proof of p x
--
--   quotient.lift_on‚ÇÇ and quotient.lift_on‚ÇÉ are shorthands for using quotient.lift_on
--   repeatedly on a function Œ± ‚Üí Œ± ‚Üí Œ± or Œ± ‚Üí Œ± ‚Üí Œ± ‚Üí Œ± respectively.
--

-- Here we go! Fractions!

structure int_nat_pair := (n: ùêô) (d: ùêç)

def fraction := {x: int_nat_pair // (x.d ‚â† 0)}

namespace fraction

open fraction

def n: fraction ‚Üí ùêô := Œª x: fraction, x.val.n

def d: fraction ‚Üí ùêç := Œª x: fraction, x.val.d

def nz (x: fraction): (x.d ‚â† 0) := x.2

protected lemma eq: ‚àÄ {x y : fraction}, x.n = y.n ‚Üí x.d = y.d ‚Üí x = y
| ‚ü®‚ü®xn, xd‚ü©, hx‚ü© ‚ü®‚ü®.(xn), .(xd)‚ü©, hy‚ü© rfl rfl := rfl

def equiv (x y: fraction): Prop := x.n * y.d = y.n * x.d

lemma equiv_refl: reflexive equiv := assume x: fraction, eq.refl (x.n * x.d)

lemma equiv_symm: symmetric equiv :=
    assume x y: fraction,
    assume h: x.n * ‚Üëy.d = y.n * ‚Üëx.d,
    eq.symm h

lemma equiv_trans: transitive equiv :=
    assume x y z: fraction,
    assume hxy: x.n * ‚Üëy.d = y.n * ‚Üëx.d,
    assume hyz: y.n * ‚Üëz.d = z.n * ‚Üëy.d,
    have hnz: (integer.from_natural y.d) ‚â† 0, from
        assume hc,
        have y.d = 0, by injection hc,
        absurd this y.nz,
    if hyn: y.n = 0 then
        have hxy: x.n * ‚Üëy.d = 0 * ‚Üëy.d, from calc
            x.n * ‚Üëy.d = y.n * ‚Üëx.d  : by rw hxy
            ...        = 0 * ‚Üëx.d    : by rw hyn
            ...        = 0           : by rw integer.zero_mult
            ...        = 0 * ‚Üëy.d    : by rw integer.zero_mult,
        have hyz: z.n * ‚Üëy.d = 0 * ‚Üëy.d, from calc
            z.n * ‚Üëy.d = y.n * ‚Üëz.d  : by rw hyz
            ...        = 0 * ‚Üëz.d    : by rw hyn
            ...        = 0           : by rw integer.zero_mult
            ...        = 0 * ‚Üëy.d    : by rw integer.zero_mult,
        have hxy: x.n = 0, from integer.mult_elim_right hnz hxy,
        have hyz: z.n = 0, from integer.mult_elim_right hnz hyz,
        calc
            x.n * ‚Üëz.d = 0 * ‚Üëz.d   : by rw hxy
            ...        = 0          : by rw integer.zero_mult
            ...        = 0 * ‚Üëx.d   : by rw integer.zero_mult
            ...        = z.n * ‚Üëx.d : by rw hyz
    else
        have y.n * ‚Üëy.d ‚â† 0, from
            assume hc: y.n * ‚Üëy.d = 0,
            have hc: y.n * ‚Üëy.d = 0 * ‚Üëy.d, from
                calc
                    y.n * ‚Üëy.d = 0        : by rw hc
                    ...        = ‚Üëy.d * 0 : by rw integer.mult_zero ‚Üëy.d
                    ...        = 0 * ‚Üëy.d : by rw integer.mul_com ‚Üëy.d,
            have y.n = 0, from integer.mult_elim_right hnz hc,
            absurd ‚Äπy.n = 0‚Ä∫ hyn,
        suffices (x.n * ‚Üëz.d) * (y.n * ‚Üëy.d) = (z.n * ‚Üëx.d) * (y.n * ‚Üëy.d), from integer.mult_elim_right ‚Äπy.n * ‚Üëy.d ‚â† 0‚Ä∫ this,
        calc
            (x.n * ‚Üëz.d) * (y.n * ‚Üëy.d) = (x.n * ‚Üëy.d) * (y.n * ‚Üëz.d)  : by rw [integer.mul_com y.n, integer.mul_asoc, ‚Üêinteger.mul_asoc x.n, integer.mul_com (‚Üëz.d), integer.mul_asoc, ‚Üêinteger.mul_asoc, integer.mul_com (‚Üëz.d)]
            ...                         = (y.n * ‚Üëx.d) * (z.n * ‚Üëy.d)  : by rw [hxy, hyz]
            ...                         = (z.n * ‚Üëx.d) * (y.n * ‚Üëy.d)  : by rw [integer.mul_asoc, ‚Üêinteger.mul_asoc y.n, integer.mul_com (‚Üëx.d), integer.mul_com y.n, integer.mul_asoc]

lemma equiv_equiv: equivalence equiv := ‚ü®equiv_refl, equiv_symm, equiv_trans‚ü©

instance fraction_setoid: setoid fraction := ‚ü®equiv, equiv_equiv‚ü©

instance equiv_decidable: ‚àÄ x y: fraction, decidable (x ‚âà y) :=
    assume x y: fraction,
    if h: x.n*y.d = y.n*x.d then
        is_true h
    else
        is_false h

def add (x y: fraction): fraction := ‚ü®‚ü®((x.n * y.d) + (y.n * x.d)), (x.d*y.d)‚ü©, natural.mult_nz x.nz y.nz‚ü©
instance fraction_has_add: has_add fraction  := ‚ü®add‚ü©

lemma add_asoc (x y z : fraction): (x + y) + z = x + (y + z) :=
have hn: ((x + y) + z).n = (x + (y + z)).n, from (
    calc
        ((x + y) + z).n = (x+y).n*z.d + z.n*(x+y).d                    : by refl
        ...             = (x.n*y.d + y.n*x.d)*z.d + z.n*(x.d*y.d)      : by refl
        ...             = x.n*y.d*z.d + y.n*x.d*z.d + z.n*x.d*y.d      : by simp only [integer.add_mult, integer.mul_asoc]
        ...             = x.n*(y.d*z.d) + (y.n*x.d*z.d + z.n*x.d*y.d)  : by rw [integer.add_asoc, integer.mul_asoc]
        ...             = x.n*(y.d*z.d) + (y.n*z.d*x.d + z.n*y.d*x.d)  : by rw [‚Üêinteger.mul_asoc y.n, integer.mul_com x.d, integer.mul_asoc y.n, ‚Üêinteger.mul_asoc z.n, integer.mul_com x.d, integer.mul_asoc z.n]
        ...             = x.n*(y.d*z.d) + (y.n*z.d + z.n*y.d)*x.d      : by rw integer.add_mult
        ...             = x.n*(y + z).d + (y + z).n*x.d                : by refl
        ...             = (x + (y + z)).n                              : by refl
),
have hd: ((x + y) + z).d = (x + (y + z)).d, from (show x.d*y.d*z.d = x.d*(y.d*z.d), by rw natural.mult_asoc),
fraction.eq hn hd


lemma add_com (x y : fraction): x + y = y + x :=
have hn: (x + y).n = (y + x).n, from (show x.n*y.d + y.n*x.d = y.n*x.d + x.n*y.d, by rw integer.add_com),
have hd: (x + y).d = (y + x).d, from (show x.d*y.d = y.d*x.d, by rw natural.mult_com),
fraction.eq hn hd

lemma add_invariant (x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ: fraction): x‚ÇÅ ‚âà x‚ÇÇ ‚Üí y‚ÇÅ ‚âà y‚ÇÇ ‚Üí ‚ü¶x‚ÇÅ+y‚ÇÅ‚üß = ‚ü¶x‚ÇÇ+y‚ÇÇ‚üß :=
    assume hx: x‚ÇÅ.n * x‚ÇÇ.d = x‚ÇÇ.n * x‚ÇÅ.d,
    assume hy: y‚ÇÅ.n * y‚ÇÇ.d = y‚ÇÇ.n * y‚ÇÅ.d,
    suffices (x‚ÇÅ+y‚ÇÅ).n * (x‚ÇÇ+y‚ÇÇ).d = (x‚ÇÇ+y‚ÇÇ).n * (x‚ÇÅ+y‚ÇÅ).d, from quotient.sound this,
    calc
        (x‚ÇÅ+y‚ÇÅ).n * (x‚ÇÇ+y‚ÇÇ).d = ((x‚ÇÅ.n * y‚ÇÅ.d) + (y‚ÇÅ.n * x‚ÇÅ.d)) * (x‚ÇÇ.d * y‚ÇÇ.d)            : by refl
        ...                   = (x‚ÇÅ.n * y‚ÇÅ.d)*(x‚ÇÇ.d * y‚ÇÇ.d) + (y‚ÇÅ.n * x‚ÇÅ.d)*(x‚ÇÇ.d * y‚ÇÇ.d)  : by rw integer.add_mult
        ...                   = (x‚ÇÅ.n * y‚ÇÅ.d)*(x‚ÇÇ.d * y‚ÇÇ.d) + (y‚ÇÅ.n * x‚ÇÅ.d)*(y‚ÇÇ.d * x‚ÇÇ.d)  : by rw integer.mul_com x‚ÇÇ.d
        ...                   = ((x‚ÇÅ.n * y‚ÇÅ.d)*x‚ÇÇ.d)*y‚ÇÇ.d + ((y‚ÇÅ.n * x‚ÇÅ.d)*y‚ÇÇ.d)*x‚ÇÇ.d      : by rw [integer.mul_asoc, integer.mul_asoc]
        ...                   = (x‚ÇÅ.n*(y‚ÇÅ.d*x‚ÇÇ.d))*y‚ÇÇ.d + (y‚ÇÅ.n*(x‚ÇÅ.d*y‚ÇÇ.d))*x‚ÇÇ.d          : by rw [integer.mul_asoc, integer.mul_asoc]
        ...                   = (x‚ÇÅ.n*(x‚ÇÇ.d*y‚ÇÅ.d))*y‚ÇÇ.d + (y‚ÇÅ.n*(y‚ÇÇ.d*x‚ÇÅ.d))*x‚ÇÇ.d          : by rw [integer.mul_com (y‚ÇÅ.d), integer.mul_com (x‚ÇÅ.d)]
        ...                   = (x‚ÇÅ.n*x‚ÇÇ.d)*(y‚ÇÅ.d*y‚ÇÇ.d) + (y‚ÇÅ.n*y‚ÇÇ.d)*(x‚ÇÅ.d*x‚ÇÇ.d)          : by rw [integer.mul_asoc, integer.mul_asoc, integer.mul_asoc, integer.mul_asoc]
        ...                   = (x‚ÇÇ.n*x‚ÇÅ.d)*(y‚ÇÅ.d*y‚ÇÇ.d) + (y‚ÇÇ.n*y‚ÇÅ.d)*(x‚ÇÅ.d*x‚ÇÇ.d)          : by rw [hx, hy]
        ...                   = (x‚ÇÇ.n*y‚ÇÇ.d)*(x‚ÇÅ.d*y‚ÇÅ.d) + (y‚ÇÇ.n*y‚ÇÅ.d)*(x‚ÇÅ.d*x‚ÇÇ.d)          : by rw [integer.mul_com y‚ÇÅ.d, integer.mul_asoc, ‚Üêinteger.mul_asoc x‚ÇÇ.n, integer.mul_com x‚ÇÅ.d, integer.mul_asoc, ‚Üêinteger.mul_asoc]
        ...                   = (x‚ÇÇ.n*y‚ÇÇ.d)*(x‚ÇÅ.d*y‚ÇÅ.d) + (y‚ÇÇ.n*y‚ÇÅ.d)*(x‚ÇÇ.d*x‚ÇÅ.d)          : by rw [‚Üêinteger.mul_com x‚ÇÅ.d]
        ...                   = (x‚ÇÇ.n*y‚ÇÇ.d)*(x‚ÇÅ.d*y‚ÇÅ.d) + (y‚ÇÇ.n*x‚ÇÇ.d)*(x‚ÇÅ.d*y‚ÇÅ.d)          : by rw [integer.mul_asoc (y‚ÇÇ.n*y‚ÇÅ.d), ‚Üêinteger.mul_asoc y‚ÇÇ.n, integer.mul_com y‚ÇÅ.d, integer.mul_asoc y‚ÇÇ.n, ‚Üêinteger.mul_asoc (y‚ÇÇ.n*x‚ÇÇ.d), integer.mul_com y‚ÇÅ.d]
        ...                   = ((x‚ÇÇ.n*y‚ÇÇ.d)+(y‚ÇÇ.n*x‚ÇÇ.d))*(x‚ÇÅ.d*y‚ÇÅ.d)                      : by rw integer.add_mult
        ...                   = (x‚ÇÇ+y‚ÇÇ).n * (x‚ÇÅ+y‚ÇÅ).d                                      : by refl


def neg (x: fraction): fraction := ‚ü®‚ü®-x.n, x.d‚ü©, x.nz‚ü©
instance fraction_has_neg: has_neg fraction  := ‚ü®neg‚ü©

lemma neg_invariant (x y: fraction): x ‚âà y ‚Üí ‚ü¶-x‚üß = ‚ü¶-y‚üß :=
    assume h: x.n * y.d = y.n * x.d,
    suffices -x.n * y.d = -y.n * x.d, from quotient.sound this,
    calc
        -x.n * y.d = -(x.n * y.d)  : by rw integer.neg_mult
        ...        = -(y.n * x.d)  : by rw h
        ...        = -y.n * x.d    : by rw integer.neg_mult

lemma neg_neg (x: fraction): -(-x) = x :=
    suffices (-(-x)).n = x.n, from fraction.eq this rfl,
    show -(-x.n) = x.n, by rw ‚Üêinteger.neg_neg x.n

#check integer.to_UnitRing.mul_one

lemma neg_add (x: fraction): -x + x ‚âà ‚ü®‚ü®0, 1‚ü©, assume h, natural.no_confusion h‚ü© :=
calc
    ((-(x.n))*‚Üëx.d + x.n*‚Üëx.d)*1  = (-(x.n))*‚Üëx.d + x.n*‚Üëx.d      : by rw integer.to_UnitRing.mul_one
    ...                           = (-(x.n) + x.n)*‚Üëx.d           : by rw ‚Üêinteger.to_Ring.add_mul
    ...                           = (0)*‚Üëx.d                      : by rw integer.to_Ring.neg_add
    ...                           = 0                             : by rw integer.to_Ring.zero_mul
    ...                           = 0*(-x + x).d                  : by rw integer.to_Ring.zero_mul

def mult (x y: fraction): fraction := ‚ü®‚ü®x.n * y.n, x.d * y.d‚ü©, natural.mult_nz x.nz y.nz‚ü©
instance fraction_has_mult: has_mul fraction := ‚ü®mult‚ü©

lemma mult_invariant (x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ: fraction): x‚ÇÅ ‚âà x‚ÇÇ ‚Üí y‚ÇÅ ‚âà y‚ÇÇ ‚Üí ‚ü¶x‚ÇÅ*y‚ÇÅ‚üß = ‚ü¶x‚ÇÇ*y‚ÇÇ‚üß :=
    assume hx: x‚ÇÅ.n * x‚ÇÇ.d = x‚ÇÇ.n * x‚ÇÅ.d,
    assume hy: y‚ÇÅ.n * y‚ÇÇ.d = y‚ÇÇ.n * y‚ÇÅ.d,
    suffices (x‚ÇÅ.n*y‚ÇÅ.n)*(x‚ÇÇ.d*y‚ÇÇ.d) = (x‚ÇÇ.n*y‚ÇÇ.n)*(x‚ÇÅ.d*y‚ÇÅ.d), from quotient.sound this,
    calc
        (x‚ÇÅ.n*y‚ÇÅ.n)*(x‚ÇÇ.d*y‚ÇÇ.d) = (x‚ÇÅ.n*x‚ÇÇ.d)*(y‚ÇÅ.n*y‚ÇÇ.d)  : by simp
        ...                     = (x‚ÇÇ.n*x‚ÇÅ.d)*(y‚ÇÇ.n*y‚ÇÅ.d)  : by rw [hx, hy]
        ...                     = (x‚ÇÇ.n*y‚ÇÇ.n)*(x‚ÇÅ.d*y‚ÇÅ.d)  : by simp

lemma mult_asoc (x y z: fraction): (x * y) * z = x * (y * z) :=
    have hn: ((x*y)*z).n = (x*(y*z)).n, from (show (x.n*y.n)*z.n = x.n*(y.n*z.n), by rw integer.mul_asoc),
    have hd: ((x*y)*z).d = (x*(y*z)).d, from (show (x.d*y.d)*z.d = x.d*(y.d*z.d), by rw natural.mult_asoc),
    fraction.eq hn hd

lemma mult_com (x y: fraction): x * y = y * x :=
    have hn: (x*y).n = (y*x).n, from (show x.n*y.n = y.n*x.n, by rw integer.mul_com),
    have hd: (x*y).d = (y*x).d, from (show x.d*y.d = y.d*x.d, by rw natural.mult_com),
    fraction.eq hn hd

def non_zero_fraction := {f: fraction // (f.n ‚â† 0)}
def inv (x: non_zero_fraction): non_zero_fraction :=
    have (integer.sgn x.val.n) * x.val.d ‚â† 0, from integer.nz_mult_nz_nz (mt (iff.elim_right integer.sgn_zero) x.property) (integer.nz_impl_coe_nz x.val.nz),
    ‚ü®‚ü®‚ü®(integer.sgn x.val.n) * x.val.d, integer.abs x.val.n‚ü©, mt (iff.elim_right integer.abs_zero) x.property‚ü©, by assumption‚ü©

lemma inv_invariant {x y: non_zero_fraction}: x.val ‚âà y.val ‚Üí (inv x).val ‚âà (inv y).val :=
    assume h: x.val.n*y.val.d = y.val.n*x.val.d,
    have hsgn: integer.sgn x.val.n = integer.sgn y.val.n, from (
        calc
            integer.sgn x.val.n = integer.sgn (x.val.n * y.val.d)   : by rw integer.sgn_mult_nat y.val.nz
            ...                 = integer.sgn (y.val.n * x.val.d)   : by rw h
            ...                 = integer.sgn y.val.n               : by rw ‚Üêinteger.sgn_mult_nat x.val.nz
    ),
    calc
        (inv x).val.n*(inv y).val.d = (integer.sgn x.val.n * x.val.d)*(integer.abs y.val.n)  : by refl
        ...                         = (integer.sgn x.val.n * integer.abs y.val.n) * x.val.d  : by rw [‚Üêinteger.mul_asoc, integer.mul_com (x.val.d), integer.mul_asoc]
        ...                         = (integer.sgn y.val.n * integer.abs y.val.n) * x.val.d  : by rw [hsgn]
        ...                         = y.val.n * x.val.d                                      : by rw integer.sgn_mult_abs
        ...                         = x.val.n * y.val.d                                      : by rw h
        ...                         = (integer.sgn x.val.n * integer.abs x.val.n) * y.val.d  : by rw integer.sgn_mult_abs
        ...                         = (integer.sgn y.val.n * integer.abs x.val.n) * y.val.d  : by rw hsgn
        ...                         = (integer.sgn y.val.n * y.val.d) * integer.abs x.val.n  : by rw [‚Üêinteger.mul_asoc, ‚Üêinteger.mul_com (y.val.d), integer.mul_asoc]
        ...                         = (inv y).val.n*(inv x).val.d                            : by refl

def over_one (x: ùêô): fraction := ‚ü®‚ü®x, 1‚ü©, assume h, natural.no_confusion h‚ü©

lemma int_mult (a: ùêô) (y: fraction): (over_one a) * y = ‚ü®‚ü®a*y.n, y.d‚ü©, y.nz‚ü© := show (‚ü®‚ü®a*y.n, 1*y.d‚ü©, natural.mult_nz (assume h, natural.no_confusion h) (y.nz)‚ü© : fraction) = ‚ü®‚ü®a*y.n, y.d‚ü©, y.nz‚ü©, from fraction.eq (rfl) (natural.one_mult y.d)

end fraction


def rational: Type := quotient fraction.fraction_setoid

notation `ùêê` := rational

namespace rational

open rational

notation n `√∑` d := ‚ü¶‚ü®‚ü®n, d‚ü©, (assume h, natural.no_confusion h)‚ü©‚üß

instance has_coe_integer_rational: has_coe integer rational := ‚ü®assume n: ùêô, (n √∑ 1)‚ü©

def zero : ùêê := ‚Üë(0: ùêô)
def one  : ùêê := ‚Üë(1: ùêô)

instance rational_has_zero: has_zero rational := ‚ü®zero‚ü©
instance rational_has_one: has_one rational := ‚ü®one‚ü©
instance rational_has_zero_: has_zero (quotient fraction.fraction_setoid) := ‚ü®zero‚ü©
instance rational_has_one_: has_one (quotient fraction.fraction_setoid) := ‚ü®one‚ü©


instance rational_of_fraction_decidable_equality (x y : fraction): decidable (‚ü¶x‚üß = ‚ü¶y‚üß) :=
    if h: x ‚âà y then is_true (quotient.sound h) else is_false (mt quotient.exact h)

protected lemma eq {x y: fraction} (h: x.n*y.d = y.n*x.d): ‚ü¶x‚üß = ‚ü¶y‚üß := suffices x ‚âà y, from quotient.sound this, h

lemma eq_zero {x: fraction}: ‚ü¶x‚üß = 0 ‚Üî x.n = 0 :=
iff.intro (
    assume h: ‚ü¶x‚üß = 0,
    have h: x ‚âà ‚ü®‚ü®0, 1‚ü©, (assume h, natural.no_confusion h)‚ü©, from quotient.exact h,
    have h: x.n*1 = 0*x.d, from h,
    show x.n = 0, by rw [‚Üêinteger.mult_one x.n, h, integer.zero_mult]
) (
    assume h: x.n = 0,
    suffices x ‚âà ‚ü®‚ü®0, 1‚ü©, (assume h, natural.no_confusion h)‚ü©, from quotient.sound this,
    show x.n*1 = 0*x.d, by rw [integer.mult_one, h, integer.zero_mult]
)

lemma zero_ne_one: rational.zero ‚â† rational.one :=
    assume h: (0 : rational) = ‚ü¶‚ü®‚ü®1, 1‚ü©, assume h, natural.no_confusion h‚ü©‚üß,
    have h: fraction.n (‚ü®‚ü®1, 1‚ü©, assume h, natural.no_confusion h‚ü© : fraction) = 0, from iff.elim_left eq_zero (eq.symm h),
    have h: (1 : ùêô) = 0, from h,
    have h: (1 : ùêç) = 0, by injection h,
    natural.no_confusion h

-- addition

def add (x y: ùêê): ùêê := quotient.lift_on‚ÇÇ x y (Œª f g: fraction, ‚ü¶f + g‚üß) fraction.add_invariant
instance rational_has_add: has_add rational := ‚ü®add‚ü©
instance rational_has_add_: has_add (quotient fraction.fraction_setoid) := ‚ü®add‚ü©

lemma add_asoc (x y z: ùêê): (x + y) + z = x + (y + z) := quotient.induction_on‚ÇÉ x y z (assume a b c: fraction, show ‚ü¶(a+b)+c‚üß = ‚ü¶a+(b+c)‚üß, by rw fraction.add_asoc)
lemma add_com (x y: ùêê): x + y = y + x := quotient.induction_on‚ÇÇ x y (assume a b: fraction, show ‚ü¶a+b‚üß = ‚ü¶b+a‚üß, by rw fraction.add_com)
lemma zero_add (x: ùêê): 0 + x = x := quotient.induction_on x (
    assume ‚ü®‚ü®n, d‚ü©, hnz‚ü©,
    suffices (‚ü®‚ü®0, 1‚ü©, assume h, natural.no_confusion h‚ü© + ‚ü®‚ü®n, d‚ü©, hnz‚ü© : fraction) ‚âà ‚ü®‚ü®n, d‚ü©, hnz‚ü©, from quotient.sound this,
    suffices (‚ü®‚ü®0, 1‚ü©, assume h, natural.no_confusion h‚ü© + ‚ü®‚ü®n, d‚ü©, hnz‚ü© : fraction) = ‚ü®‚ü®n, d‚ü©, hnz‚ü©, from (eq.symm this) ‚ñ∏ (fraction.equiv_refl ‚ü®‚ü®n, d‚ü©, hnz‚ü©),
    suffices (‚ü®‚ü®0, 1‚ü©, assume h, natural.no_confusion h‚ü© + ‚ü®‚ü®n, d‚ü©, hnz‚ü© : fraction).n = n ‚àß (‚ü®‚ü®0, 1‚ü©, assume h, natural.no_confusion h‚ü© + ‚ü®‚ü®n, d‚ü©, hnz‚ü© : fraction).d = d, from fraction.eq this.left this.right,
    and.intro (
        calc
            (‚ü®‚ü®0, 1‚ü©, assume h, natural.no_confusion h‚ü© + ‚ü®‚ü®n, d‚ü©, hnz‚ü© : fraction).n = 0*d + n*1  : by refl
            ...                                                                       = 0 + n*1    : by rw integer.to_Ring.zero_mul
            ...                                                                       = n*1        : by rw integer.to_Ring.zero_add
            ...                                                                       = n          : by rw integer.to_UnitRing.mul_one
    ) (
        calc
            (‚ü®‚ü®0, 1‚ü©, assume h, natural.no_confusion h‚ü© + ‚ü®‚ü®n, d‚ü©, hnz‚ü© : fraction).d = 1*d  : by refl
            ...                                                                       = d    : by rw natural.one_mult
    )
)

-- negation

def neg (x : ùêê): ùêê := quotient.lift_on x (Œª f:fraction, ‚ü¶-f‚üß) fraction.neg_invariant
instance rational_has_neg: has_neg rational := ‚ü®neg‚ü©

lemma neg_neg (x : ùêê): -(-x) = x := quotient.induction_on x (assume a: fraction, show ‚ü¶-(-a)‚üß = ‚ü¶a‚üß, by rw fraction.neg_neg)
lemma neg_add (x : ùêê): -x + x = 0 := quotient.induction_on x (
    assume a: fraction,
    suffices -a + a ‚âà ‚ü®‚ü®0, 1‚ü©, (assume h, natural.no_confusion h)‚ü©, from quotient.sound this,
    fraction.neg_add a
)

-- subtraction

def sub (x y: ùêê): ùêê := x + -y

-- multiplication

def mult (x y: ùêê): ùêê := quotient.lift_on‚ÇÇ x y (Œª f g: fraction, ‚ü¶f*g‚üß) fraction.mult_invariant
instance rational_has_mult: has_mul rational := ‚ü®mult‚ü©
instance rational_has_mult_: has_mul (quotient fraction.fraction_setoid) := ‚ü®mult‚ü©

lemma mult_asoc (x y z: ùêê): (x*y)*z = x*(y*z) := quotient.induction_on‚ÇÉ x y z (assume a b c: fraction, show ‚ü¶(a*b)*c‚üß = ‚ü¶a*(b*c)‚üß, by rw fraction.mult_asoc)
lemma mult_com (x y: ùêê): x*y = y*x := quotient.induction_on‚ÇÇ x y (assume a b: fraction, show ‚ü¶a*b‚üß = ‚ü¶b*a‚üß, by rw fraction.mult_com)

lemma one_mult (x: ùêê): 1*x = x := quotient.induction_on x (
    assume y,
    show ‚ü¶(fraction.over_one 1) * y‚üß = ‚ü¶y‚üß, from
    suffices (‚ü¶‚ü®‚ü®1*y.n, y.d‚ü©, y.nz‚ü©‚üß : rational) = ‚ü¶y‚üß, from calc
        ‚ü¶(fraction.over_one 1) * y‚üß = ‚ü¶‚ü®‚ü®1*y.n, y.d‚ü©, y.nz‚ü©‚üß : by rw ‚Üêfraction.int_mult 1
        ...                        =  ‚ü¶y‚üß  : by rw this
    ,
    rational.eq (
        show 1 * y.n * y.d = y.n * y.d, by rw integer.to_UnitRing.one_mul
    )
)
lemma mult_add (x y z: ùêê): z*(x + y) = z*x + z*y := quotient.induction_on‚ÇÉ x y z (
    assume a b c : fraction,
    show ‚ü¶c * (a + b)‚üß = ‚ü¶c*a + c*b‚üß, from
    suffices (c* (a + b)).n * (c*a + c*b).d = (c*a + c*b).n * (c* (a + b)).d, from rational.eq this,
    calc
        (c* (a + b)).n * (c*a + c*b).d = (c.n * (a.n*b.d + b.n*a.d)) * ((c.d*a.d)*(c.d*b.d))         : by refl
        ...                            = (c.n*(a.n*b.d) + c.n*(b.n*a.d)) * ((c.d*a.d)*(c.d*b.d))     : by rw Ring.mul_add
        ...                            = ((c.n*a.n)*b.d + (c.n*b.n)*a.d) * ((c.d*a.d)*(c.d*b.d))     : by rw [Ring.mul_assoc ùêô c.n, Ring.mul_assoc ùêô c.n]
        ...                            = (((c.n*a.n)*b.d + (c.n*b.n)*a.d) * c.d)*(a.d*(c.d*b.d))     : by rw [Ring.mul_assoc ùêô c.d, Ring.mul_assoc ùêô ((c.n*a.n)*b.d + (c.n*b.n)*a.d)]
        ...                            = ((c.n*a.n)*b.d*c.d + (c.n*b.n)*a.d*c.d)*(a.d*(c.d*b.d))     : by rw [Ring.add_mul]
        ...                            = ((c.n*a.n)*(b.d*c.d) + (c.n*b.n)*(a.d*c.d))*(a.d*(c.d*b.d)) : by rw [Ring.mul_assoc ùêô, Ring.mul_assoc ùêô (c.n*b.n)]
        ...                            = ((c.n*a.n)*(c.d*b.d) + (c.n*b.n)*(c.d*a.d))*(a.d*(c.d*b.d)) : by rw [CommRing.mul_comm ùêô b.d, CommRing.mul_comm ùêô a.d]
        ...                            = ((c*a).n*(c*b).d + (c*b).n*(c*a).d)*(a.d*(c.d*b.d))         : by refl
        ...                            = (c*a + c*b).n*(a.d*(c.d*b.d))                               : by refl
        ...                            = (c*a + c*b).n*((a.d*c.d)*b.d)                               : by rw [Ring.mul_assoc ùêô]
        ...                            = (c*a + c*b).n*((c.d*a.d)*b.d)                               : by rw [CommRing.mul_comm ùêô a.d]
        ...                            = (c*a + c*b).n*(c.d*(a.d*b.d))                               : by rw [Ring.mul_assoc ùêô]
        ...                            = (c*a + c*b).n * (c* (a + b)).d                              : by refl
)
lemma no_zero_divisors (x y : ùêê): x*y = 0 ‚Üí x ‚â† 0 ‚Üí y = 0 := quotient.induction_on‚ÇÇ x y (
    assume a b : fraction,
    assume h: ‚ü¶a * b‚üß = 0,
    assume ha: ‚ü¶a‚üß ‚â† 0,
    have h: (a * b).n = 0, from iff.elim_left eq_zero h,
    have h: a.n * b.n = 0, from h,
    have ha: a.n ‚â† 0, from (mt (iff.elim_right eq_zero)) ha,
    suffices b.n = 0, from iff.elim_right eq_zero this,
    integer.to_NZDRing.no_zero_divisors h ha
)

-- inverse

private def inv_frac_rat (a: fraction) : ùêê :=
if h: a.n = 0 then
    (0: ùêê)
else
    ‚ü¶(fraction.inv ‚ü®a, h‚ü©).val‚üß

lemma inv_frac_rat_nz (x: fraction): (x.n ‚â† 0) ‚Üí inv_frac_rat x = ‚ü¶(fraction.inv ‚ü®x, ‚Äπx.n ‚â† 0‚Ä∫‚ü©).val‚üß :=
match x with
| ‚ü®‚ü®0, d‚ü©, h‚ü©                          := assume h, absurd (eq.refl 0) h
| ‚ü®‚ü®integer.from_natural (n+1), d‚ü©, h‚ü© := assume h, by refl
| ‚ü®‚ü®-[n+1], d‚ü©, h‚ü©                     := assume h, by refl
end

lemma inv_frac_rat_invariant (a b: fraction): a ‚âà b ‚Üí inv_frac_rat a = inv_frac_rat b :=
assume h: a.n*b.d = b.n*a.d,
if ha: a.n = 0 then
    have hb: b.n = 0, from (
        suffices b.n*a.d = 0, from integer.mult_nz_eq_z_imp_z this (integer.nz_impl_coe_nz a.nz),
        calc
            b.n*a.d = a.n*b.d  : by rw h
            ...     = 0*b.d    : by rw ha
            ...     = 0        : by rw integer.zero_mult
    ),
    calc
        inv_frac_rat a = inv_frac_rat ‚ü®‚ü®a.n, a.d‚ü©, a.nz‚ü©  : by refl
        ...            = inv_frac_rat ‚ü®‚ü®0, a.d‚ü©, a.nz‚ü©    : by rw ha
        ...            = 0                                : by refl
        ...            = inv_frac_rat ‚ü®‚ü®0, b.d‚ü©, b.nz‚ü©    : by refl
        ...            = inv_frac_rat ‚ü®‚ü®b.n, b.d‚ü©, b.nz‚ü©  : by rw hb
        ...            = inv_frac_rat b                   : by refl
else
    have hb: b.n ‚â† 0, from (
        assume hc: b.n = 0,
        suffices a.n = 0, from absurd this ha,
        suffices a.n*b.d = 0, from integer.mult_nz_eq_z_imp_z this (integer.nz_impl_coe_nz b.nz),
        calc
            a.n*b.d = b.n*a.d : by rw h
            ...     = 0*a.d   : by rw hc
            ...     = 0       : by rw integer.zero_mult
    ),
    have hs: (fraction.inv ‚ü®a, ha‚ü©).val ‚âà (fraction.inv ‚ü®b, hb‚ü©).val, from fraction.inv_invariant h,
    calc
        inv_frac_rat a = ‚ü¶(fraction.inv ‚ü®a, ha‚ü©).val‚üß  : by rw inv_frac_rat_nz a ha
        ...            = ‚ü¶(fraction.inv ‚ü®b, hb‚ü©).val‚üß  : by rw quotient.sound hs
        ...            = inv_frac_rat b                : by rw inv_frac_rat_nz b hb

def inv (x: ùêê): ùêê := quotient.lift_on x (Œª f, inv_frac_rat f) inv_frac_rat_invariant
instance: has_inv ùêê := ‚ü®inv‚ü©

lemma inv_nz_is_nz {x: ùêê}: x ‚â† 0 ‚Üí x‚Åª¬π ‚â† 0 := quotient.induction_on x (
    assume a: fraction,
    assume ha: ‚ü¶a‚üß ‚â† 0,
    have ha: a.n ‚â† 0, from mt (iff.elim_right eq_zero) ha,
    show inv_frac_rat a ‚â† 0, from
    suffices ‚ü¶(fraction.inv ‚ü®a, ha‚ü©).val‚üß ‚â† 0, from eq.symm (inv_frac_rat_nz a ha) ‚ñ∏ this,
    suffices (fraction.inv ‚ü®a, ha‚ü©).val.n ‚â† 0, from mt (iff.elim_left eq_zero) this,
    assume hc: ((fraction.inv ‚ü®a, ha‚ü©).val).n = 0,
    suffices (a.d : ùêç) = 0, from absurd this a.nz,
    suffices (a.d : ùêô) = 0, by injection this,
    have hc: (integer.sgn a.n) * a.d = 0, from hc,
    have integer.sgn a.n ‚â† 0, from mt (iff.elim_right integer.sgn_zero) ha,
    integer.to_NZDRing.no_zero_divisors hc ‚Äπinteger.sgn a.n ‚â† 0‚Ä∫
)

lemma inv_mul {x: ùêê}: x ‚â† 0 ‚Üí x‚Åª¬π * x = 1 := quotient.induction_on x (
    assume a: fraction,
    assume ha: ‚ü¶a‚üß ‚â† 0,
    have ha: a.n ‚â† 0, from mt (iff.elim_right eq_zero) ha,
    show inv_frac_rat a * ‚ü¶a‚üß = 1, from
    suffices ‚ü¶(fraction.inv ‚ü®a, ha‚ü©).val‚üß * ‚ü¶a‚üß = (1 : ùêê), by rw [inv_frac_rat_nz, this],
    suffices ‚ü¶(fraction.inv ‚ü®a, ha‚ü©).val * a‚üß = (1 : ùêê), from this,
    suffices ((fraction.inv ‚ü®a, ha‚ü©).val * a).n*1 = 1*((fraction.inv ‚ü®a, ha‚ü©).val * a).d, from rational.eq this,
    calc
        ((fraction.inv ‚ü®a, ha‚ü©).val * a).n*1 = ((fraction.inv ‚ü®a, ha‚ü©).val * a).n                             : by rw integer.to_UnitRing.mul_one
        ...                                  = ((fraction.inv ‚ü®a, ha‚ü©).val).n * a.n                           : by refl
        ...                                  = (integer.sgn a.n * a.d) * a.n                                  : by refl
        ...                                  = (integer.sgn a.n * a.d) * (integer.sgn a.n * integer.abs a.n)  : by rw integer.sgn_mult_abs
        ...                                  = (integer.sgn a.n * integer.sgn a.n) * (integer.abs a.n * a.d)  : by rw [Ring.mul_assoc, CommRing.mul_comm ùêô a.d, Ring.mul_assoc, Ring.mul_assoc]
        ...                                  = 1 * (integer.abs a.n * a.d)                                    : by rw integer.sgn_mult_sgn ha
)

instance rational_decidable_equal: decidable_eq ùêê := quotient.decidable_eq

-- ùêê is a field
def to_Field: Field ùêê :=
{
    is_set := assume x y, if h:x = y then or.intro_left _ h else or.intro_right _ h,
    add_assoc := add_asoc,
    add_comm := add_com,
    left_zero := zero_add,
    left_neg := neg_add,
    mul_assoc := mult_asoc,
    mul_comm := mult_com,
    left_distrib := mult_add,
    left_one := one_mult,
    nzd := no_zero_divisors,
    inv_nz_is_nz := @inv_nz_is_nz,
    left_inv := @inv_mul,
    zero_ne_one := zero_ne_one,
}

end rational
